/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based security model with ownership checks for user data.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user or super-admin.
 * - /users/{userId}/delivery_addresses/{deliveryAddressId}: Delivery addresses owned by the user.
 * - /users/{userId}/payment_methods/{paymentMethodId}: Payment methods owned by the user.
 * - /orders/{orderId}: Orders placed by users, with access control based on user role.
 * - /orders/{orderId}/order_items/{orderItemId}: Items within an order, with access control based on user role.
 * - /menu_items/{menuItemId}: Publicly accessible menu items.
 * - /expenses/{expenseId}: Business expenses, accessible only by admins and super-admins.
 * - /suppliers/{supplierId}: Supplier information, accessible only by admins and super-admins.
 * - /business_units/{businessUnitId}: Business unit information, accessible only by admins and super-admins.
 *
 * Key Security Decisions:
 * - User data is strictly controlled via path-based ownership.
 * - Listing user profiles is disallowed.
 * - Menu items are publicly readable.
 * - Admin and super-admin roles have elevated privileges for managing expenses, suppliers, and business units.
 *
 * Authorization Decision Rationale:
 * The user has requested all permissions due to being a super-admin. Therefore, the following rules will apply:
 * - Super-admins can read and write all data.
 * - Admins can read and write expenses, suppliers, and business units.
 * - Users can only access their own profile data, delivery addresses, payment methods and orders.
 * - Menu items are publicly readable, but only admins can create, update, or delete them.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for certain actions.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership-based access control.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an existing owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Combines ownership and existence checks for safer operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has the 'admin' role.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Implements role-based access control.
     */
    function isAdmin() {
        return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || isSuperAdmin());
    }

    /**
     * @description Checks if the current user has the 'super-admin' role.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Implements role-based access control.
     */
    function isSuperAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super-admin';
    }

    /**
     * @description Defines the super admin role
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Implement super admin functionality
     */
    match /users/{userId} {
      /**
       * @description Manages user profile data, accessible only by the user.
       * @path /users/{userId}
       * @allow (get, create, update, delete) User with matching UID can access their profile.
       * @deny (get, create, update, delete) User tries to access another user's profile.
       * @principle Enforces document ownership and prevents unauthorized profile access.
       */
      allow get: if isOwner(userId) || isSuperAdmin();
      allow list: if false;
      allow create: if isOwner(userId) || isSuperAdmin();
      allow update: if isExistingOwner(userId) || isSuperAdmin();
      allow delete: if isExistingOwner(userId) || isSuperAdmin();
    }

    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      /**
       * @description Manages delivery addresses associated with a user.
       * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
       * @allow (get, list, create, update, delete) User with matching UID can access their delivery addresses.
       * @deny (get, list, create, update, delete) User tries to access another user's delivery addresses.
       * @principle Enforces document ownership and prevents unauthorized access to delivery addresses.
       */
      allow get: if isOwner(userId) || isSuperAdmin();
      allow list: if isOwner(userId) || isSuperAdmin();
      allow create: if isOwner(userId) || isSuperAdmin();
      allow update: if isExistingOwner(userId) || isSuperAdmin();
      allow delete: if isExistingOwner(userId) || isSuperAdmin();
    }

    match /users/{userId}/payment_methods/{paymentMethodId} {
      /**
       * @description Manages payment methods associated with a user.
       * @path /users/{userId}/payment_methods/{paymentMethodId}
       * @allow (get, list, create, update, delete) User with matching UID can access their payment methods.
       * @deny (get, list, create, update, delete) User tries to access another user's payment methods.
       * @principle Enforces document ownership and prevents unauthorized access to payment methods.
       */
      allow get: if isOwner(userId) || isSuperAdmin();
      allow list: if isOwner(userId) || isSuperAdmin();
      allow create: if isOwner(userId) || isSuperAdmin();
      allow update: if isExistingOwner(userId) || isSuperAdmin();
      allow delete: if isExistingOwner(userId) || isSuperAdmin();
    }

    match /orders/{orderId} {
      /**
       * @description Manages orders placed by a user or by an admin
       * @path /orders/{orderId}
       * @allow (get, list, create, update, delete) User with matching UID can access their orders.
       * @deny (get, list, create, update, delete) User tries to access another user's orders.
       * @principle Enforces document ownership and prevents unauthorized access to orders.
       */
      allow get: if (resource.data.userId == request.auth.uid && isSignedIn()) || isAdmin() || isSuperAdmin();
      allow list: if isSignedIn() || isAdmin() || isSuperAdmin();
      allow create: if isSignedIn() || isAdmin() || isSuperAdmin();
      allow update: if (resource.data.userId == request.auth.uid && isSignedIn() && resource != null) || isAdmin() || isSuperAdmin();
      allow delete: if (resource.data.userId == request.auth.uid && isSignedIn() && resource != null) || isAdmin() || isSuperAdmin();
    }

    match /orders/{orderId}/order_items/{orderItemId} {
      /**
       * @description Manages order items within an order.
       * @path /orders/{orderId}/order_items/{orderItemId}
       * @allow (get, list) User with matching orderId can access order items.
       * @deny (get, list) User tries to access order items of another user.
       * @principle Order items are accessible to all users.
       */
       allow get: if true || isAdmin() || isSuperAdmin();
       allow list: if true || isAdmin() || isSuperAdmin();
       allow create: if isAdmin() || isSuperAdmin();
       allow update: if isAdmin() || isSuperAdmin();
       allow delete: if isAdmin() || isSuperAdmin();
    }

    match /menu_items/{menuItemId} {
      /**
       * @description Manages menu items available in the app. Publicly accessible for reading, admin-only for writes.
       * @path /menu_items/{menuItemId}
       * @allow (get, list) All users can read menu items.
       * @deny (create, update, delete) Only admins can modify menu items.
       * @principle Public read access with restricted write access for content management.
       */
      allow get: if true || isAdmin() || isSuperAdmin();
      allow list: if true || isAdmin() || isSuperAdmin();
      allow create: if isAdmin() || isSuperAdmin();
      allow update: if isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }

    match /expenses/{expenseId} {
      /**
       * @description Manages business expenses. Accessible only by admins and super-admins.
       * @path /expenses/{expenseId}
       * @allow (get, list, create, update, delete) Only admins and super-admins can access and modify expenses.
       * @deny (get, list, create, update, delete) Regular users cannot access expenses.
       * @principle Restricts expense management to authorized personnel.
       */
      allow get: if isAdmin() || isSuperAdmin();
      allow list: if isAdmin() || isSuperAdmin();
      allow create: if isAdmin() || isSuperAdmin();
      allow update: if isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }

    match /suppliers/{supplierId} {
      /**
       * @description Manages supplier information. Accessible only by admins and super-admins.
       * @path /suppliers/{supplierId}
       * @allow (get, list, create, update, delete) Only admins and super-admins can access and modify supplier information.
       * @deny (get, list, create, update, delete) Regular users cannot access supplier information.
       * @principle Restricts supplier management to authorized personnel.
       */
      allow get: if isAdmin() || isSuperAdmin();
      allow list: if isAdmin() || isSuperAdmin();
      allow create: if isAdmin() || isSuperAdmin();
      allow update: if isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }

    match /business_units/{businessUnitId} {
      /**
       * @description Manages business unit information. Accessible only by admins and super-admins.
       * @path /business_units/{businessUnitId}
       * @allow (get, list, create, update, delete) Only admins and super-admins can access and modify business unit information.
       * @deny (get, list, create, update, delete) Regular users cannot access business unit information.
       * @principle Restricts business unit management to authorized personnel.
       */
      allow get: if isAdmin() || isSuperAdmin();
      allow list: if isAdmin() || isSuperAdmin();
      allow create: if isAdmin() || isSuperAdmin();
      allow update: if isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }

    match /departments/{departmentId} {
      allow read, list: if isAdmin() || isSuperAdmin();
      allow create: if isAdmin() || isSuperAdmin() && request.resource.data.businessUnitId in get(/databases/$(database)/documents/business_units/$(request.resource.data.businessUnitId)).data.keys();
      allow update: if isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }

    match /groups/{groupId} {
      allow read, list: if isAdmin() || isSuperAdmin();
      allow create: if isAdmin() || isSuperAdmin() && request.resource.data.departmentId in get(/databases/$(database)/documents/departments/$(request.resource.data.departmentId)).data.keys();
      allow update: if isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }

    match /concepts/{conceptId} {
      allow read, list: if isAdmin() || isSuperAdmin();
      allow create: if isAdmin() || isSuperAdmin() && request.resource.data.groupId in get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)).data.keys();
      allow update: if isAdmin() || isSuperAdmin();
      allow delete: if isAdmin() || isSuperAdmin();
    }
  }
}