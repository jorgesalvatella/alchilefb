/**
 * @fileOverview Firestore Security Rules for the Al Chile Delivery app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (profiles, delivery addresses, payment methods)
 * and role-based access control for business data (expenses, suppliers, business units). Menu items are publicly readable.
 *
 * Data Structure:
 * - User-specific data is nested under /users/{userId}.
 * - Orders are stored in a top-level /orders/{orderId} collection.
 * - Menu items are stored in a top-level /menu_items collection.
 * - Business expenses, suppliers, and business units are stored in their respective top-level collections.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data, delivery addresses, and payment methods.
 * - Menu items are publicly readable but writes are disallowed due to lack of defined ownership.
 * - Listing of user profiles is denied to prevent information disclosure.
 * - Admin/super-admin roles are required to access expense, supplier, and business unit data.
 *
 * Denormalization for Authorization:
 * - For the current data structure, no denormalization is required since all authorization checks are path-based or role-based.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile with id 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile with id 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/update/delete the profile at /users/user123.
     * @deny (list) - Listing user profiles is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to delivery addresses. Only the user can read/write their own addresses.
     * @path /users/{userId}/delivery_addresses/{deliveryAddressId}
     * @allow (create) - User with UID 'user123' can create an address under /users/user123/delivery_addresses/address456.
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their address at /users/user123/delivery_addresses/address456.
     * @deny (create) - User with UID 'user456' cannot create an address under /users/user123/delivery_addresses/address456.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/update/delete the address at /users/user123/delivery_addresses/address456.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/delivery_addresses/{deliveryAddressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to payment methods. Only the user can read/write their own payment methods.
     * @path /users/{userId}/payment_methods/{paymentMethodId}
     * @allow (create) - User with UID 'user123' can create a payment method under /users/user123/payment_methods/payment789.
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their payment method at /users/user123/payment_methods/payment789.
     * @deny (create) - User with UID 'user456' cannot create a payment method under /users/user123/payment_methods/payment789.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/update/delete the payment method at /users/user123/payment_methods/payment789.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/payment_methods/{paymentMethodId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to orders. Only the user who placed the order or an admin can access it.
     * @path /orders/{orderId}
     * @allow (get, list) - Any signed-in user can read order details and list all orders.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete orders.
     * @principle Allows public read access but restricts write access to admins/super-admins.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure access to order items.  Order Items are publicly readable, but writes are disallowed.
     * @path /orders/{orderId}/order_items/{orderItemId}
     * @allow (get, list) - Any signed-in user can read order items and list all order items.
     * @deny (create, update, delete) - No one can create, update, or delete order items.
     * @principle Allows public read access but restricts write access.
     */
    match /orders/{orderId}/order_items/{orderItemId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure access to menu items.  Menu Items are publicly readable, but writes are disallowed.
     * @path /menu_items/{menuItemId}
     * @allow (get, list) - Anyone can read menu items.
     * @deny (create, update, delete) - No one can create, update, or delete menu items.
     * @principle Allows public read access but restricts write access.
     */
    match /menu_items/{menuItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure access to expenses. Only admins/super-admins can access expenses.
     * @path /expenses/{expenseId}
     * @allow (get, list, create, update, delete) - Only users with 'admin' or 'super-admin' role can access expenses.
     * @deny (get, list, create, update, delete) - Other users cannot access expenses.
     * @principle Restricts access based on user role.
     */
    match /expenses/{expenseId} {
      allow get: if isAdmin() || isSuperAdmin();
      allow list: if isAdmin() || isSuperAdmin();
      allow create: if isAdmin() || isSuperAdmin();
      allow update: if isExistingAdmin() || isExistingSuperAdmin();
      allow delete: if isExistingAdmin() || isExistingSuperAdmin();
    }

    /**
     * @description Secure access to suppliers. Only admins/super-admins can access suppliers.
     * @path /suppliers/{supplierId}
     * @allow (get, list, create, update, delete) - Only users with 'admin' or 'super-admin' role can access suppliers.
     * @deny (get, list, create, update, delete) - Other users cannot access suppliers.
     * @principle Restricts access based on user role.
     */
    match /suppliers/{supplierId} {
      allow get: if isAdmin() || isSuperAdmin();
      allow list: if isAdmin() || isSuperAdmin();
      allow create: if isAdmin() || isSuperAdmin();
      allow update: if isExistingAdmin() || isExistingSuperAdmin();
      allow delete: if isExistingAdmin() || isExistingSuperAdmin();
    }

    /**
     * @description Secure access to business units. Only admins/super-admins can access business units.
     * @path /business_units/{businessUnitId}
     * @allow (get, list, create, update, delete) - Only users with 'admin' or 'super-admin' role can access business units.
     * @deny (get, list, create, update, delete) - Other users cannot access business units.
     * @principle Restricts access based on user role.
     */
    match /business_units/{businessUnitId} {
      allow get: if isAdmin() || isSuperAdmin();
      allow list: if isAdmin() || isSuperAdmin();
      allow create: if isAdmin() || isSuperAdmin();
      allow update: if isExistingAdmin() || isExistingSuperAdmin();
      allow delete: if isExistingAdmin() || isExistingSuperAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && (getUserRole() == 'admin');
    }

     function isExistingAdmin() {
          return isAdmin() && resource != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && (getUserRole() == 'super-admin');
    }

    function isExistingSuperAdmin() {
        return isSuperAdmin() && resource != null;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
  }
}